import { ChannelMetadata, PlaylistMetadata, VideoMetadata } from '@/types'
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs))
}

export function formatSeconds(seconds: string | number | null): string {
    if (seconds === null) {
        return ''
    }

    seconds = Number(seconds)

    if (seconds < 3600) {
        return new Date(seconds * 1000).toISOString().slice(14, 19).toString()
    }
    return new Date(seconds * 1000).toISOString().slice(11, 19).toString()
}

export type Metadata = PlaylistMetadata | VideoMetadata | ChannelMetadata

export function formatSubscriberNumber(num: number): string {
    if (num < 1000) {
        return num.toString()
    }

    if (num < 1000000) {
        return (num / 1000).toFixed(2).replace(/\.?0+$/, '') + 'K'
    }

    return (num / 1000000).toFixed(2).replace(/\.?0+$/, '') + 'M'
}

export function formatBytes(bytes: number, decimals: number = 1): string {
    if (bytes === 0) return '0 Bytes'

    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] // yes, this was generated by ai ...

    const i = Math.floor(Math.log(bytes) / Math.log(k))

    return (
        parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + sizes[i]
    )
}

export function formatResolution(resolutionStr: string): string {
    const [width, height] = resolutionStr.toLowerCase().split('x').map(Number)
    if (!width || !height) {
        throw new Error(
            'Invalid resolution format. Expected format: "WidthxHeight"'
        )
    }

    if (width >= 7680 && height >= 4320) return '8K'
    if (width >= 3840 && height >= 2160) return '4K'
    if (width >= 2560 && height >= 1440) return '1440p'
    if (width >= 1920 && height >= 1080) return '1080p'
    if (width >= 1280 && height >= 720) return '720p'
    if (width >= 720 && height >= 480) return '480p'
    if (width >= 640 && height >= 360) return '360p'
    if (width >= 426 && height >= 240) return '240p'

    return `${width}x${height}`
}

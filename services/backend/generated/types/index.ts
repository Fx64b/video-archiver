// Code generated by tygo. DO NOT EDIT.

//////////
// source: job.go

export type JobStatus = string;
export const JobStatusPending: JobStatus = "pending";
export const JobStatusInProgress: JobStatus = "in_progress";
export const JobStatusComplete: JobStatus = "complete";
export const JobStatusError: JobStatus = "error";
export interface Job {
  id: string;
  url: string;
  status: JobStatus;
  progress: number /* float64 */;
  custom_quality?: number /* int */;
  created_at: string /* RFC3339 */;
  updated_at: string /* RFC3339 */;
}

export type JobRepository = any;
export type JobType = string;
export const JobTypeVideo: JobType = "video";
export const JobTypeAudio: JobType = "audio";
export const JobTypeMetadata: JobType = "metadata";
/**
 * deprecated, remove in the future
 */
export interface JobWithMetadata {
  job?: Job;
  metadata?: Metadata;
}
export interface ProgressUpdate {
  jobID: string;
  jobType: string;
  status?: JobStatus;
  currentItem: number /* int */;
  totalItems: number /* int */;
  progress: number /* float64 */;
  currentVideoProgress: number /* float64 */;
  downloadPhase: string;
  isRetrying?: boolean;
  retryCount?: number /* int */;
  maxRetries?: number /* int */;
  retryError?: string;
}
export const DownloadPhaseMetadata = "metadata";
export const DownloadPhaseVideo = "video";
export const DownloadPhaseAudio = "audio";
export const DownloadPhaseMerging = "merging";
export const DownloadPhaseComplete = "complete";
export interface VideoMetadata {
  id: string;
  title: string;
  description: string;
  thumbnail: string;
  duration: number /* int */;
  duration_string: string;
  view_count: number /* int */;
  like_count: number /* int */;
  comment_count: number /* int */;
  channel: string;
  channel_id: string;
  channel_url: string;
  channel_follower_count: number /* int */;
  channel_is_verified: boolean;
  uploader: string;
  uploader_id: string;
  uploader_url: string;
  tags: string[];
  categories: string[];
  upload_date: string;
  filesize_approx: number /* int64 */;
  format: string;
  ext: string;
  language: string;
  width: number /* int */;
  height: number /* int */;
  resolution: string;
  fps: number /* float64 */;
  dynamic_range: string;
  vcodec: string;
  aspect_ratio: number /* float64 */;
  acodec: string;
  audio_channels: number /* int */;
  was_live: boolean;
  webpage_url_domain: string;
  extractor: string;
  fulltitle: string;
  _type: string;
}
export interface Thumbnail {
  url: string;
  height: number /* int */;
  width: number /* int */;
  id: string;
}
export interface PlaylistItem {
  id: string;
  title: string;
  description?: string;
  thumbnail?: string;
  duration?: number /* int */;
  duration_string?: string;
  upload_date?: string;
  view_count?: number /* int */;
  like_count?: number /* int */;
  video_file?: string;
  channel?: string;
  channel_id?: string;
  channel_url?: string;
  width?: number /* int */;
  height?: number /* int */;
  resolution?: string;
  filesize_approx?: number /* int64 */;
  format?: string;
  ext?: string;
  tags?: string[];
}
export interface PlaylistMetadata {
  id: string;
  title: string;
  description: string;
  thumbnails: Thumbnail[];
  uploader_id: string;
  uploader_url: string;
  channel_id: string;
  channel: string;
  channel_url: string;
  channel_follower_count: number /* int */;
  playlist_count: number /* int */;
  view_count?: number /* int */;
  items?: PlaylistItem[];
  _type: string;
}
export interface ChannelMetadata {
  id: string;
  channel: string;
  channel_url: string;
  description: string;
  thumbnails: Thumbnail[];
  channel_follower_count: number /* int */;
  playlist_count: number /* int */;
  _type: string;
  video_count?: number /* int */;
  total_storage?: number /* int64 */;
  total_views?: number /* int */;
  recent_videos?: PlaylistItem[];
}
export interface MetadataUpdate {
  jobID: string;
  metadata: Metadata;
}
export type Metadata = any;

//////////
// source: settings.go

export interface Settings {
  id: number /* int */;
  theme: string;
  download_quality: number /* int */;
  concurrent_downloads: number /* int */;
  tools_default_format: string;
  tools_default_quality: string;
  tools_preserve_original: boolean;
  tools_output_path: string;
  created_at: string /* RFC3339 */;
  updated_at: string /* RFC3339 */;
}

export type SettingsRepository = any;

//////////
// source: statistics.go

export interface Statistics {
  total_jobs: number /* int */;
  total_videos: number /* int */;
  total_playlists: number /* int */;
  total_channels: number /* int */;
  total_storage: number /* int */;
  top_videos: VideoStorageInfo[];
  other_storage: number /* int */;
  last_update: string /* RFC3339 */;
}
export interface VideoStorageInfo {
  title: string;
  size: number /* int */;
  channel: string;
}

//////////
// source: tools.go

export type ToolsJobStatus = string;
export const ToolsJobStatusPending: ToolsJobStatus = "pending";
export const ToolsJobStatusProcessing: ToolsJobStatus = "processing";
export const ToolsJobStatusComplete: ToolsJobStatus = "complete";
export const ToolsJobStatusFailed: ToolsJobStatus = "failed";
export const ToolsJobStatusCancelled: ToolsJobStatus = "cancelled";
export type ToolsOperationType = string;
export const OpTypeTrim: ToolsOperationType = "trim";
export const OpTypeConcat: ToolsOperationType = "concat";
export const OpTypeConvert: ToolsOperationType = "convert";
export const OpTypeExtractAudio: ToolsOperationType = "extract_audio";
export const OpTypeAdjustQuality: ToolsOperationType = "adjust_quality";
export const OpTypeRotate: ToolsOperationType = "rotate";
export const OpTypeWorkflow: ToolsOperationType = "workflow";
export interface ToolsJob {
  id: string;
  operation_type: ToolsOperationType;
  status: ToolsJobStatus;
  progress: number /* float64 */; // 0-100
  input_files: string[]; // Job IDs (videos, playlists, or channels)
  input_type: string; // "videos", "playlist", "channel"
  output_file: string; // Generated file path
  parameters: { [key: string]: any}; // Operation-specific params
  error_message?: string;
  created_at: string /* RFC3339 */;
  updated_at: string /* RFC3339 */;
  completed_at?: string /* RFC3339 */;
  estimated_size?: number /* int64 */; // Bytes
  actual_size?: number /* int64 */; // Bytes
}
/**
 * Operation-specific parameter structures
 */
export interface TrimParameters {
  start_time: string; // HH:MM:SS or seconds
  end_time: string; // HH:MM:SS or seconds
  re_encode: boolean; // Force re-encode or stream copy
}
export interface ConcatParameters {
  output_format: string; // mp4, mkv, etc.
  re_encode: boolean; // Force re-encode if codecs differ
  file_order: string[]; // Explicit ordering of input files
  sort_by: string; // For channel: upload_date, title, duration
  order: string; // asc or desc
}
export interface ConvertParameters {
  output_format: string; // mp4, webm, mkv, avi, mov
  video_codec: string; // h264, h265, vp9, etc.
  audio_codec: string; // aac, mp3, opus, etc.
  bitrate: string; // e.g., "2M", "5M"
  preserve_quality: boolean; // Use original quality settings
}
export interface ExtractAudioParameters {
  output_format: string; // mp3, aac, flac, wav, ogg
  bitrate: string; // e.g., "128k", "320k"
  sample_rate: number /* int */; // e.g., 44100, 48000
}
export interface AdjustQualityParameters {
  resolution: string; // 480p, 720p, 1080p, etc.
  bitrate: string; // Target bitrate
  crf: number /* int */; // Constant Rate Factor (0-51)
  two_pass: boolean; // Use two-pass encoding
}
export interface RotateParameters {
  rotation: number /* int */; // 90, 180, 270 degrees
  flip_h: boolean; // Flip horizontal
  flip_v: boolean; // Flip vertical
}
export interface WorkflowParameters {
  steps: WorkflowStep[]; // Ordered list of operations
  keep_intermediate_files: boolean; // Save intermediate outputs
  stop_on_error: boolean; // Stop workflow if step fails
}
export interface WorkflowStep {
  operation: ToolsOperationType; // Operation type for this step
  parameters: { [key: string]: any}; // Parameters for this operation
  output_name?: string; // Custom name for output
}
/**
 * Progress update for WebSocket
 */
export interface ToolsProgressUpdate {
  jobID: string;
  status: ToolsJobStatus;
  progress: number /* float64 */;
  current_step: string; // e.g., "Analyzing", "Encoding", "Finalizing"
  time_elapsed: number /* int */; // Seconds
  time_remaining: number /* int */; // Estimated seconds
  error?: string;
}

export type ToolsRepository = any;
